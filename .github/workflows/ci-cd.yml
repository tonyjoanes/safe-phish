name: PhishGuardAI CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Tests and Build
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore backend/PhishGuardAI.Api/PhishGuardAI.Api.csproj
      
    - name: Build
      run: dotnet build backend/PhishGuardAI.Api/PhishGuardAI.Api.csproj --no-restore
      
    - name: Test
      run: dotnet test backend/PhishGuardAI.Tests/PhishGuardAI.Tests.csproj --no-build --verbosity normal
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=testdb;Username=testuser;Password=testpass"

  # Frontend Tests and Build
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/phishguardai-dashboard/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      working-directory: frontend/phishguardai-dashboard
      
    - name: Run ESLint
      run: npm run lint
      working-directory: frontend/phishguardai-dashboard
      
    - name: Build
      run: npm run build
      working-directory: frontend/phishguardai-dashboard
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        
    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/phishguardai-api:latest
        
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/phishguardai-dashboard
        file: ./frontend/phishguardai-dashboard/Dockerfile.prod
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/phishguardai-frontend:latest

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif' 